(setq tab-always-indent 'complete
      tab-stop-list (number-sequence 4 200 4)
      require-final-newline t
      text-mode-hook '(turn-on-auto-fill
                       text-mode-hook-identify))
(setq-default indent-tabs-mode nil
              tab-width 4)

(line-number-mode t)
(column-number-mode t)
(size-indication-mode t)

(menu-bar-mode 0)
(when (fboundp 'tool-bar-mode)
  (tool-bar-mode 0)
  (scroll-bar-mode -1))

;; My keyboard customizations -- set up the minor mode's key map
(defvar my-kbs-map (make-keymap) "My custom keybindings.")

;; Don't insert instructions in the *scratch* buffer
(setq initial-scratch-message nil)

;; Use "y or n" answers instead of full words "yes or no"
(fset 'yes-or-no-p 'y-or-n-p)
;; Dont show the GNU splash screen
(setq inhibit-startup-message t)
;; will make the last line end in a carriage return.
(setq require-final-newline t)

;; Save history
(savehist-mode 1)
(setq make-backup-files t
      vc-make-backup-files t
      backup-by-copying t
      backup-directory-alist '(("." . "~/.emacs.d/backups"))
      delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t)

;; Package stuff
(package-initialize)
(add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/") t)
(setq url-http-attempt-keepalives nil)

(defvar my-packages
  '(smex)
  "A list of packages to ensure are installed at launch.")

(defun install-my-packages ()
  "Install each package in ``my-packages`` if it isn't installed."
  (let ((package-contents-refreshed nil))
    (dolist (my-package my-packages)
      (unless (package-installed-p my-package)
        (unless package-contents-refreshed
          (package-refresh-contents)
          (setq package-contents-refreshed t))
        (package-install my-package)))))

(install-my-packages)

;; Interactively Do Things instead...
(require 'ido)
(ido-mode t)
(setq ido-enable-flex-matching t) ;; fuzzy completion

;; Smex
(require 'smex)
(smex-initialize)
(define-key my-kbs-map (kbd "M-x") 'smex)
(define-key my-kbs-map (kbd "M-X") 'smex-major-mode-commands)
(define-key my-kbs-map (kbd "C-c M-x") 'execute-extended-command) ;; old M-x

(load-theme 'wheatgrass t)

;; Define the minor mode for my keybindings and activate it
(define-minor-mode my-kbs-minor-mode
  "A minor mode for my custom keybindings."
  t           ;; Enable by default
  " my-kbs"   ;; name in mode line
  my-kbs-map)

;; Turn off in the minibuffer
(add-hook 'minibuffer-setup-hook (lambda () (my-kbs-minor-mode 0)))
