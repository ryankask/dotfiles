(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(column-number-mode t)
 '(global-linum-mode 1)
 '(indent-tabs-mode nil)
 '(locale-coding-system (quote utf-8) t)
 '(prefer-coding-system (quote utf-8))
 '(set-default-coding-system (quote utf-8))
 '(set-keyboard-coding-system (quote utf-8))
 '(set-language-environment (quote utf-8))
 '(set-selection-coding-system (quote utf-8))
 '(set-terminal-coding-system (quote utf-8))
 '(show-paren-mode t)
 '(tab-stop-list (quote (4 8 12 16 20 24 28 32 36 40 44 48 52 56 60)))
 '(tab-width 4)
 '(text-mode-hook (quote (turn-on-auto-fill text-mode-hook-identify)))
 '(utf-translate-cjk-mode nil))

;; Alias "utf-8" as "UTF-8"
(define-coding-system-alias 'UTF-8 'utf-8)

;; My keyboard customizations -- set up the minor mode's key map
(defvar my-keybindings-minor-mode-map (make-keymap) "My custom keybindings.")

;; Don't insert instructions in the *scratch* buffer
(setq initial-scratch-message nil)

;; Use "y or n" answers instead of full words "yes or no"
(fset 'yes-or-no-p 'y-or-n-p)
;; Dont show the GNU splash screen
(setq inhibit-startup-message t)
;; will make the last line end in a carriage return.
(setq require-final-newline t)
;; get rid of trailing whitespace
(add-hook 'before-save-hook
          (lambda()
            (unless (eq major-mode 'org-mode)
              (delete-trailing-whitespace))))

(require 'savehist)
(savehist-load)
(setq
   backup-by-copying t
   backup-directory-alist
    '(("." . "~/.emacs-backups"))
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t)

;; Package stuff

(package-initialize)
(add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/") t)
(setq url-http-attempt-keepalives nil)

(defvar my-packages
  '(smex)
  "A list of packages to ensure are installed at launch.")

(defun my-packages-installed-p ()
  (loop for p in my-packages
        when (not (package-installed-p p)) do (return nil)
        finally (return t)))

(require 'cl)
(unless (my-packages-installed-p)
  (package-refresh-contents)
  (dolist (p my-packages)
    (when (not (package-installed-p p))
      (package-install p))))

;; Interactively Do Things instead...
(require 'ido)
(ido-mode t)
(setq ido-enable-flex-matching t) ;; fuzzy completion

;; Smex
(require 'smex)
(smex-initialize)
(define-key my-keybindings-minor-mode-map (kbd "M-x") 'smex)
(define-key my-keybindings-minor-mode-map (kbd "M-X") 'smex-major-mode-commands)
(define-key my-keybindings-minor-mode-map
  (kbd "C-c M-x") 'execute-extended-command) ;; old M-x

(load-theme 'wheatgrass t)

;; Define the minor mode for my keybindings and activate it
(define-minor-mode my-keybindings-minor-mode
  "A minor mode for my custom keybindings."
  t                 ;; Enable by default
  " my-keybindings" ;; name in mode line
  'my-keybindings-minor-mode-map)

;; Turn off in the minibuffer
(defun my-keybindings-minibuffer-setup-hook ()
  (my-keybindings-minor-mode 0))
(add-hook 'minibuffer-setup-hook 'my-keybindings-minibuffer-setup-hook)

(my-keybindings-minor-mode 1)
