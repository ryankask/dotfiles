layout_virtualenv() {
  local venv_path="$1"
  source ${venv_path}/bin/activate
}

layout_venv() {
  source .venv/bin/activate
}

layout_virtualenvwrapper() {
  local venv_path="${WORKON_HOME:=$HOME/.virtualenvs}/$1"
  layout_virtualenv $venv_path
}

layout_poetry() {
  # Create the path to the virtualenv without invoking Poetry.
  # Adapted from `EnvManager.generate_env_name()` in
  # https://github.com/python-poetry/poetry/blob/master/src/poetry/utils/env.py
  local sanitized_project_name=$( \
    awk -f $DOTFILES/.config/direnv/poetry-project-name.awk pyproject.toml \
    | tr '[:upper:]' '[:lower:]' \
    | sed 's/[ $`!*@"\]/_/g' \
    | cut -c -42
  )
  if [[ -z "$sanitized_project_name" ]]; then
    echo "layout_poetry: project name not found"
    exit 1
  fi
  local hashed_pwd=$(
    echo -n $PWD \
    | sha256sum \
    | cut -d ' ' -f 1 \
    | xxd -r -p \
    | base64 \
    | cut -c -8 \
    | tr '/+' '_-' \
    | tr -d '='
  )
  local venv_prefix="${sanitized_project_name}-${hashed_pwd}"
  local venv_path="$(fd --type d --max-depth 1 $venv_prefix $HOME/Library/Caches/pypoetry/virtualenvs)"
  layout_virtualenv $venv_path
  export POETRY_ACTIVE=1
}

layout_conda() {
  local env="$1"
  if [[ -z $env ]]; then
    echo "Conda env required"
    exit 1
  fi
  eval "$(conda shell.bash hook)"
  conda activate $env
}
